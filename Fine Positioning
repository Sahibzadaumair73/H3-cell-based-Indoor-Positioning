from sklearn.datasets import make_regression
from sklearn.multioutput import MultiOutputRegressor
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error

#Load the test fingerprints in H3-cell
tes_51=tes_2[tes_2['h3_cell']== ' ']
tes_51= tes_51.reset_index()
tes_51 = tes_51.drop('index', axis=1)
y_test=tes_51[['lat', 'lon']]
#y_test=yy1.to_numpy()
X_test=tes_51.drop(columns=['lat', 'lon','floor','lati2', 'longi2','h3_cell'])
#y_test=yy1.to_numpy()

# Extract train_Set figerprints from the main train file
# r1 contains the coasre location H3-cell and its neighboring H3-cells
tra_3=tra_2[tra_2['h3_cell'].isin(r1)]
y1=tra_3[['lat', 'lon']]
y2=y1.to_numpy()
X1=tra_3.drop(columns=['lat', 'lon','floor','lati1', 'longi1','h3_cell'])
X2=X1.to_numpy()

# Train/test split
X_train, X_eval, y_train, y_eval = train_test_split(X1, y1, test_size=0.001, random_state=33)

# Create the SVR regressor
svr = SVR(epsilon=0.01)

# Create the Multioutput Regressor
mor = MultiOutputRegressor(svr)

# Train the regressor
mor = mor.fit(X_train, y_train)

Predictions5=mor.predict(X_test)
dataframe=pd.DataFrame(Predictions5, columns=['lat','lon']) 
lat0= 39.9372616
lon0= -0.1004465
h0=0
h=0
e5,n5,height1=pm.enu2geodetic(dataframe.lat.values,dataframe.lon.values,h,lat0,lon0,h0,ell=None,deg=True)
dataframe["e5"]=e5
dataframe["n5"]=n5
dataframe=dataframe.drop(columns=['lat', 'lon'])
Predictions2=dataframe.to_numpy()


tess=tes_51[['lati2','longi2']]
tess=tess.to_numpy()
mse = mean_squared_error(Predictions2, tess)
rmse = math.sqrt(mse)
print(rmse)
disty31=[]
for i in range(len(y_test)):
          dist = mpu.haversine_distance(Predictions2[i],tess[i])
          disty31.append(dist)
p_25 = np.percentile(disty31, 25)
p_50 = np.percentile(disty31, 50)
p_68 = np.percentile(disty31, 68)
p_75 = np.percentile(disty31, 75)
p_90 = np.percentile(disty31, 90)
p_95 = np.percentile(disty31, 95)
p_25,p_50,p_68,p_75,p_90,p_95
